
The code is broken into two sections.
  1. The L1H solver.
  2. The repeated application of the L1H solver to analyze an image.

L1H solvers (C libraries):
  1. homotopy_general - This is a generic homotopy solver that should be able to solve
      any problem that any 3rd party homotopy solver can solve.
  2. homotopy_storm - This is a more specialized solver. It assumes that x is positive
      only, and that last term in x represents a uniform background. Additionally it
      takes some shortcuts to speed computation (it assumes that it can safely ignore
      all the locations where the C matrix is negative).
  3. homotopy_sse - This version is the same as homotopy_storm except that it uses the 
      SSE and AVX (if available) vector math optimizations to further increase the
      speed of computation.

Image analyzers (C libraries):
  1. homotopy_ia_storm - This does image analysis by repeated application of
      homotopy_storm to sub-sections of the image.
  2. homotopy_ia_sse - This does image analysis by repeated application of
      homotopy_sse to sub-sections of the image.


A sample run (execute in the L1H/sample_data directory):

$ python
>>> from storm_analysis.L1H.cs_analysis import analyze
>>> analyze("sample.dax", "sample.xml", "sample.hres", "sample_cslist.bin")
('Using A matrix file:', 'sample_a7_k5_i8_o8_p8_4.amat')
('High resolution image size:', (2048, 2048))
('Starting analysis at frame', 0)
 Total blocks: 2601, Failures: Max Non Zero 0, Max Iterations 0, Cholesky 0
('Frame:', 0, 1990, 1990)
('Added', 1990)

The sample.hres file contains the original up-sampled imaged as returned by the
analysis in "high-resolution" format. A reader for this format is provided in 
sa_library/readhres.py. The sample_cslist.bin file contains a Insight3 format file
that was generated by calculating the center of masses of all the contiguous pixels
in the up-sampled image. The sample_list.bin file contains the original locations
of the emitters that make up this simulated image.


A matrices can be generated using setup_A_matrix.py. For analysis of simulated data
you only need to provide a sigma to describe the gaussian PSF. For analysis of
experimental data it can help to provide a measured PSF. This can be calculated
using homotopy_psf.py which uses the results from a fitting based analysis such
as 3D-DAOSTORM to measure the PSF.
